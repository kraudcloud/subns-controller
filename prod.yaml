---
apiVersion: v1
kind: Namespace
metadata:
  name: subns-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: subns-controller
  namespace: subns-system
  labels:
    app: subns-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: subns-controller
  template:
    metadata:
      labels:
        app: subns-controller
    spec:
      serviceAccountName: subns-controller
      containers:
      - name: manager
        image: ctr.0x.pt/subns-controller/subns-controller:latest
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 500m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 64Mi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: subns-controller
  namespace: subns-system
---
# First ClusterRole for controller operations
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: subns-controller-role
rules:
- apiGroups: ["subns.subns.kraud.cloud"]
  resources: ["subnamespaceclaims"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["subns.subns.kraud.cloud"]
  resources: ["subnamespaceclaims/status"]
  verbs: ["get", "update", "patch"]
- apiGroups: ["subns.subns.kraud.cloud"]
  resources: ["subnamespaceclaims/finalizers"]
  verbs: ["update"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["rolebindings"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
# Add ability to manage roles and grant permissions
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles"]
  verbs: ["bind", "escalate", "get", "list", "watch"]
---
# Second ClusterRole that contains all permissions that can be granted
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: subns-controller-permission-granter
rules:
# Core API permissions
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
# Bind the controller ServiceAccount to both ClusterRoles
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: subns-controller-rolebinding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: subns-controller-role
subjects:
- kind: ServiceAccount
  name: subns-controller
  namespace: subns-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: subns-controller-permission-granter-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: subns-controller-permission-granter
subjects:
- kind: ServiceAccount
  name: subns-controller
  namespace: subns-system
